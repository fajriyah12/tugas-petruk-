\\ bubble sort 
void bubbleSort(std::vector<int>& arr) {
    int d = arr.size();
    for (int i = 0; i < d - 1; ++i) {
        for (int j = 0; j < d - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                std::swap(arr[j], arr[j + 1]);
            }
        }
    }
}

\\insertion sort 
#include <iostream>
#include <vector>

void insertionSort(std::vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}

\\selection sort 
#include <iostream>
#include <vector>

void selectionSort(std::vector<int>& arr) {
    int d = arr.size();
    for (int i = 0; i < d - 1; ++i) {
        int minIndex = i;
        for (int j = i + 1; j < d; ++j) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        std::swap(arr[i], arr[minIndex]);
    }
}


\\marge sort 
#include <iostream>
#include <vector>

void merge(std::vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    std::vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; ++i) L[i] = arr[left + i];
    for (int i = 0; i < n2; ++i) R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

\\quick sort 
#include <iostream>
#include <vector>

int partition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; ++j) {
        if (arr[j] < pivot) {
            std::swap(arr[++i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(std::vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

\\pengujian kompleksitas 
void measureTime(void (*sortFunc)(int[], int), int arr[], int n) {
    auto start = high_resolution_clock::now();
    sortFunc(arr, n);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken: " << duration.count() << " microseconds" << endl;
}

cpp
Copy code
int main() {
    int sizes[] = {10, 100, 500, 1000, 10000};
    for (int size : sizes) {
        int *arr = new int[size];

        // Kondisi data: acak, terurut terbalik, dan sudah terurut
        cout << "Array size: " << size << endl;
        for (const string& condition : {"Random", "Reverse Sorted", "Sorted"}) {
            cout << "Condition: " << condition << endl;

            // Generate data sesuai kondisi
            int *tempArr = new int[size];
            copy(arr, arr + size, tempArr);

            if (condition == "Reverse Sorted") {
                sort(tempArr, tempArr + size, greater<int>());
            } else if (condition == "Sorted") {
                sort(tempArr, tempArr + size);
            }

            int *arrBubble = new int[size];
            int *arrInsertion = new int[size];
            int *arrSelection = new int[size];
            int *arrMerge = new int[size];
            int *arrQuick = new int[size];

            copy(tempArr, tempArr + size, arrBubble);
            copy(tempArr, tempArr + size, arrInsertion);
            copy(tempArr, tempArr + size, arrSelection);
            copy(tempArr, tempArr + size, arrMerge);
            copy(tempArr, tempArr + size, arrQuick);

            cout << "Bubble Sort: ";
            measureTime(bubbleSort, arrBubble, size);

            cout << "Insertion Sort: ";
            measureTime(insertionSort, arrInsertion, size);

            cout << "Selection Sort: ";
            measureTime(selectionSort, arrSelection, size);

            cout << "Merge Sort: ";
            measureTime([](int arr[], int n) { mergeSort(arr, 0, n-1); }, arrMerge, size);

            cout << "Quick Sort: ";
            measureTime([](int arr[], int n) { quickSort(arr, 0, n-1); }, arrQuick, size);
            cout << endl;

            delete[] arrBubble;
            delete[] arrInsertion;
            delete[] arrSelection;
            delete[] arrMerge;
            delete[] arrQuick;
            delete[] tempArr;
        }
        delete[] arr;
        cout << "-------------------------" << endl;
    }
    return 0;
}
